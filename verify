#!/bin/bash

ok=1
failures=""
count=0
failure_count=0

run() {
    filename=$1
    echo "$filename:"
    basename=${filename%.*}
    suffix=${filename#*.}
    out=$filename.out
    case $suffix in
        a68)
            a68g $filename > $out
            ;;
        adb)
            gnatmake $basename
            ./$basename > $out
            rm -f $basename{,.ali,.o}
            ;;
        b)
            sed 's/^$/#include <stdio.h>/;s/main()/int main(void)/;s/auto/auto int/;s/*n/\\n/' $filename >| $filename.c
            gcc $filename.c -o $basename
            ./$basename > $out
            rm -f $filename.c $basename
            ;;
        bas)
            bwbasic $filename | sed '/ \|^$/d' > $out # Need to filter out the copyright header
            ;;
        c)
            gcc -std=c99 $filename -o $basename
            ./$basename > $out
            rm -f $basename
            ;;
        cob)
            cobc -x $filename
            ./$basename > $out
            rm -f $basename
            ;;
        cpp)
            g++ $filename -o $basename
            ./$basename > $out
            rm -f $basename
            ;;
        cs)
            gmcs $filename
            ./$basename.exe > $out
            rm -f $basename.exe
            ;;
        d)
            gdc $filename -o $basename
            ./$basename > $out
            rm -f $basename
            ;;
        f)
            fort77 $filename -o $basename
            ./$basename > $out
            rm -f $basename
            ;;
        f90)
            gfortran $filename -o $basename
            ./$basename > $out
            rm -f $basename
            ;;
        fizzbuzz)
            /usr/local/bin/fizzbuzz $filename > $out
            ;;
        go)
            go build -o $basename $filename
            ./$basename > $out
            rm -f $basename
            ;;
        gpt)
            gpt $filename -o $basename
            ./$basename > $out
            rm -f $basename
            ;;
        groovy)
            groovyc $filename
            jar cvf $basename.jar *.class
            CLASSPATH=$basename.jar groovy $basename > $out
            rm -f *.class $basename.jar
            ;;
        hs)
            ghc $filename
            ./$basename > $out
            rm -f $basename.hi $basename.o $basename
            ;;
        java)
            javac $filename
            jar cvf $basename.jar $basename.class
            CLASSPATH=$basename.jar java $basename > $out
            # java $basename > $out
            rm -f $basename.class $basename.jar
            ;;
        pas)
            fpc $filename
            ./$basename > $out
            rm -f $basename $basename.o
            ;;
        m)
            # Problem: gcc, when compiling an Objective-C (".m")
            # file creates and intermediate file with a ".d" suffix,
            # clobbering the "fizzbuzz.d" D source file. To avoid this,
            # compile and run in a temporary directory.
            mkdir tmpdir-$$
            cd tmpdir-$$
            cp ../fizzbuzz.m .
            . /usr/share/GNUstep/Makefiles/GNUstep.sh
            cc -std=c99 `gnustep-config --objc-flags` $filename -lobjc -lgnustep-base -o $basename
            ./$basename > ../$out
            cd ..
            rm -rf tmpdir-$$
            ;;
        m4)
            m4 $filename > $out
            ;;
        mod)
            gm2 $filename -o $basename
            ./$basename > $out
            rm -f $basename
            ;;
        nodejs)
            if [ -x /usr/bin/nodejs ] ; then
                # Ubuntu 12.10
                ./$filename &
            elif [ -x /usr/bin/node ] ; then
                # Ubuntu 12.04
                /usr/bin/node $filename &
            fi
            sleep 1
            curl --silent http://localhost:9000 > $out
            kill $!
            ;;
        ratfor)
            ratfor -o $filename.f $filename
            f77 $filename.f -o $basename
            ./$basename > $out
            rm -f $filename.f $basename
            ;;
        rs)
            rustc $filename
            ./$basename > $out
            rm -f $basename
            ;;
        s)
            gcc $filename -o $basename
            ./$basename > $out
            rm -f $basename
            ;;
        scala)
            scalac $filename
            jar cvf $basename.jar *.class
            CLASSPATH=$basename.jar scala $basename > $out
            rm -f *.class $basename.jar
            ;;
        vb)
            vbnc $filename
            chmod +x $basename.exe
            ./$basename.exe > $out
            rm -f $basename.exe
            ;;
        *)
            ./$filename > $out
            ;;
    esac
    if ! cmp -s $out expected-output.txt ; then
        ok=0
        failures="$failures $filename"
        (( failure_count++ ))
    fi
    rm -f $out
    (( count++ ))
}

if [ $# -gt 0 ] ; then
    for file in "$@" ; do
        run $file
    done
else
    for file in fizzbuzz.* ; do
        run $file
    done
fi

s=''
if [ $count -ne 1 ] ; then
    s=s
fi
echo Tested $count language$s
if [ $ok -eq 1 ] ; then
    echo OK
else
    s=s
    if [ $failure_count -eq 1 ] ; then s='' ; fi
    echo "$failure_count failure$s: $failures"
fi
